service: modifier-api

#plugins:
#  - serverless-dynamodb-local
#  - serverless-offline

custom:
  stageName: ${opt:stage, 'dev'}
  dynamodbTableName: ${self:custom.stageName}-modifierTable
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

provider:
  name: aws
  runtime: provided
  region: us-east-2
  memorySize: 128
  timeout: 5
  stage: ${self:custom.stageName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - modifierTable
          - Arn
  environment:
    DISABLE_SIGNAL_HANDLERS: true
    DYNAMODB_TABLE: ${self:custom.dynamodbTableName}

package:
  artifact: build/function.zip

resources:
  Resources:
    modifierTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: merchant
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: merchant
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  add-modifier:
    handler: me.molka.handler.ApiHandler
    events:
      - httpApi:
          method: POST
          path: '/modifiers'
          request:
            schemas:
              application/json:
                schema: ${file(src/main/resources/create_request.json)}
                name: CreateModifiersModel
                description: 'Validation model for creating/updating modifiers'
  get-modifiers-by-merchant:
    handler: me.molka.handler.ApiHandler
    events:
      - httpApi:
          method: GET
          path: '/modifiers/merchant/{merchantId}'
  get-modifiers-by-product:
    handler: me.molka.handler.ApiHandler
    events:
      - httpApi:
          method: GET
          path: '/modifiers/merchant/{merchantId}/product/{productId}'
  get-modifiers-by-group:
    handler: me.molka.handler.ApiHandler
    events:
      - httpApi:
          method: GET
          path: '/modifiers/merchant/{merchantId}/product/{productId}/group/{groupId}'
  get-modifier-by-id:
    handler: me.molka.handler.ApiHandler
    events:
      - httpApi:
          method: GET
          path: '/modifiers/merchant/{merchantId}/product/{productId}/group/{groupId}/modifier/{modifierId}'
  #            template:
  #              application/json: >
  #                #set($inputRoot = $input.path('$'))
  #                {
  #                  "action": "CREATE_MODIFIER",
  #                  "name": "$inputRoot.name",
  #                  "cost": "$inputRoot.cost",
  #                  "atLeast": "$inputRoot.atLeast",
  #                  "atMost": "$inputRoot.atMost",
  #                  "isDefault": "$inputRoot.isDefault",
  #                  "isHidden": "$inputRoot.isHidden"
  #                }
  #          response:
  #            headers:
  #              Access-Control-Allow-Origin: "'*'"
  #              Content-Type: "'application/json'"
  #            template: >
  #              #set($inputRoot = $input.path('$'))
  #              {
  #                "result": $inputRoot
  #

#        }
#  get-modifier:
#    handler: me.molka.handler.GetModifiersByProductHandler
#    events:
#      - httpApi:
#          method: GET
#          path: '/modifier'
#          integration: lambda



#          request:
#            template:
#              application/json: >
#                #set($inputRoot = $input.path('$'))
#                {
#                  "id": "$input.params('id')",
#                  "action": "GET_MODIFIER"
#                }
#          response:
#            headers:
#              Access-Control-Allow-Origin: "'*'"
#              Content-Type: "'application/json'"
#            template: >
#              #set($inputRoot = $input.path('$'))
#              {
#                "result": $inputRoot
#              }
#  delete-modifier:
#    handler: me.molka.handler.ModifierHandler
#    events:
#      - http:
#          path: modifier/{modifierId}
#          method: delete
#          integration: lambda
#          request:
#            template:
#              application/json: >
#                #set($inputRoot = $input.path('$'))
#                {
#                  "id": "$input.params('id')",
#                  "action": "DELETE_MODIFIER"
#                }
#          response:
#            headers:
#              Access-Control-Allow-Origin: "'*'"
#              Content-Type: "'application/json'"
#            template: >
#              #set($inputRoot = $input.path('$'))
#              {
#                "result": $inputRoot
#              }
#
#  get-all-modifiers:
#    handler: me.molka.handler.ModifierHandler
#    events:
#      - http:
#          path: modifier
#          method: get
#          integration: lambda
#          request:
#            template:
#              application/json: >
#                #set($inputRoot = $input.path('$'))
#                {
#                  "action": "LIST"
#                }
#          response:
#            headers:
#              Access-Control-Allow-Origin: "'*'"
#              Content-Type: "'application/json'"
#            template: >
#              #set($inputRoot = $input.path('$'))
#              {
#                "result": $inputRoot
#              }
