{
  "service": {
    "service": "modifier-service",
    "serviceObject": {
      "name": "modifier-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "provided",
      "region": "us-east-2",
      "memorySize": 128,
      "timeout": 5,
      "stage": "dev",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": {
            "Fn::GetAtt": [
              "modifierTable",
              "Arn"
            ]
          }
        }
      ],
      "environment": {
        "DISABLE_SIGNAL_HANDLERS": "true",
        "DYNAMODB_TABLE": "dev-modifierTable"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AddDashmodifierLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/modifier-service-dev-add-modifier"
            }
          },
          "GetDashmodifierLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/modifier-service-dev-get-modifier"
            }
          },
          "DeleteDashmodifierLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/modifier-service-dev-delete-modifier"
            }
          },
          "GetDashallDashmodifiersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/modifier-service-dev-get-all-modifiers"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "modifier-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/modifier-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/modifier-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "modifier-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AddDashmodifierLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z/function.zip"
              },
              "Handler": "me.molka.handler.ModifierHandler",
              "Runtime": "provided",
              "FunctionName": "modifier-service-dev-add-modifier",
              "MemorySize": 128,
              "Timeout": 5,
              "Environment": {
                "Variables": {
                  "DISABLE_SIGNAL_HANDLERS": "true",
                  "DYNAMODB_TABLE": "dev-modifierTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddDashmodifierLogGroup"
            ]
          },
          "GetDashmodifierLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z/function.zip"
              },
              "Handler": "me.molka.handler.ModifierHandler",
              "Runtime": "provided",
              "FunctionName": "modifier-service-dev-get-modifier",
              "MemorySize": 128,
              "Timeout": 5,
              "Environment": {
                "Variables": {
                  "DISABLE_SIGNAL_HANDLERS": "true",
                  "DYNAMODB_TABLE": "dev-modifierTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashmodifierLogGroup"
            ]
          },
          "DeleteDashmodifierLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z/function.zip"
              },
              "Handler": "me.molka.handler.ModifierHandler",
              "Runtime": "provided",
              "FunctionName": "modifier-service-dev-delete-modifier",
              "MemorySize": 128,
              "Timeout": 5,
              "Environment": {
                "Variables": {
                  "DISABLE_SIGNAL_HANDLERS": "true",
                  "DYNAMODB_TABLE": "dev-modifierTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashmodifierLogGroup"
            ]
          },
          "GetDashallDashmodifiersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z/function.zip"
              },
              "Handler": "me.molka.handler.ModifierHandler",
              "Runtime": "provided",
              "FunctionName": "modifier-service-dev-get-all-modifiers",
              "MemorySize": 128,
              "Timeout": 5,
              "Environment": {
                "Variables": {
                  "DISABLE_SIGNAL_HANDLERS": "true",
                  "DYNAMODB_TABLE": "dev-modifierTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashallDashmodifiersLogGroup"
            ]
          },
          "GetDashmodifierLambdaVersion5G3OslINbJCY3SLKZZmWfGdZ47KrAOjMB2gwvutBioM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashmodifierLambdaFunction"
              },
              "CodeSha256": "iV6y7lem7sI5Yozxu6O1xHCSMKoPC0OcdWS9B5M0+EE="
            }
          },
          "AddDashmodifierLambdaVersionPn3SiayYG5M8F729iXaKyVvW6SoWYvmtueJJHqXcuRI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddDashmodifierLambdaFunction"
              },
              "CodeSha256": "iV6y7lem7sI5Yozxu6O1xHCSMKoPC0OcdWS9B5M0+EE="
            }
          },
          "DeleteDashmodifierLambdaVersionfLvpnDpaQOryCqkAOCTLYHz8SfTCVUYhcuXwLw5PD4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashmodifierLambdaFunction"
              },
              "CodeSha256": "iV6y7lem7sI5Yozxu6O1xHCSMKoPC0OcdWS9B5M0+EE="
            }
          },
          "GetDashallDashmodifiersLambdaVersiondenVEdmM6UWbkj55DHUAJBAEC8G6EX27gfrfojaUs4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashallDashmodifiersLambdaFunction"
              },
              "CodeSha256": "iV6y7lem7sI5Yozxu6O1xHCSMKoPC0OcdWS9B5M0+EE="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-modifier-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceModifier": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "modifier",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceModifierAdd": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceModifier"
              },
              "PathPart": "add",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceModifierModifieridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceModifier"
              },
              "PathPart": "{modifierId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodModifierAddPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceModifierAdd"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddDashmodifierLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"action\": \"CREATE_MODIFIER\",\n  \"name\": \"$inputRoot.name\",\n  \"cost\": \"$inputRoot.cost\",\n  \"atLeast\": \"$inputRoot.atLeast\",\n  \"atMost\": \"$inputRoot.atMost\",\n  \"isDefault\": \"$inputRoot.isDefault\",\n  \"isHidden\": \"$inputRoot.isHidden\"\n}\n",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "AddDashmodifierLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodModifierModifieridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceModifierModifieridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashmodifierLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"id\": \"$input.params('id')\",\n  \"action\": \"GET_MODIFIER\"\n}\n",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "GetDashmodifierLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodModifierModifieridVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceModifierModifieridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashmodifierLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"id\": \"$input.params('id')\",\n  \"action\": \"DELETE_MODIFIER\"\n}\n",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "DeleteDashmodifierLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodModifierGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceModifier"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashallDashmodifiersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"action\": \"LIST\"\n}\n",
                  "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop,\n\n    \"requestPath\": \"$context.resourcePath\"\n  }\n\n  "
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "SelectionPattern": "",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "400",
                    "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "401",
                    "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "403",
                    "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "404",
                    "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "422",
                    "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "500",
                    "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "502",
                    "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  },
                  {
                    "StatusCode": "504",
                    "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Content-Type": "'application/json'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n"
                    }
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "200"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "400"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "401"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "403"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "404"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "422"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "500"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "502"
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Content-Type": true
                  },
                  "ResponseModels": {},
                  "StatusCode": "504"
                }
              ]
            },
            "DependsOn": [
              "GetDashallDashmodifiersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1626088493544": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodModifierAddPost",
              "ApiGatewayMethodModifierModifieridVarGet",
              "ApiGatewayMethodModifierModifieridVarDelete",
              "ApiGatewayMethodModifierGet"
            ]
          },
          "AddDashmodifierLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddDashmodifierLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashmodifierLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashmodifierLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashmodifierLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashmodifierLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashallDashmodifiersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashallDashmodifiersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "modifierTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "dev-modifierTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-modifier-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetDashmodifierLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashmodifierLambdaVersion5G3OslINbJCY3SLKZZmWfGdZ47KrAOjMB2gwvutBioM"
            },
            "Export": {
              "Name": "sls-modifier-service-dev-GetDashmodifierLambdaFunctionQualifiedArn"
            }
          },
          "AddDashmodifierLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddDashmodifierLambdaVersionPn3SiayYG5M8F729iXaKyVvW6SoWYvmtueJJHqXcuRI"
            },
            "Export": {
              "Name": "sls-modifier-service-dev-AddDashmodifierLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashmodifierLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashmodifierLambdaVersionfLvpnDpaQOryCqkAOCTLYHz8SfTCVUYhcuXwLw5PD4"
            },
            "Export": {
              "Name": "sls-modifier-service-dev-DeleteDashmodifierLambdaFunctionQualifiedArn"
            }
          },
          "GetDashallDashmodifiersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashallDashmodifiersLambdaVersiondenVEdmM6UWbkj55DHUAJBAEC8G6EX27gfrfojaUs4"
            },
            "Export": {
              "Name": "sls-modifier-service-dev-GetDashallDashmodifiersLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-modifier-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "stageName": "dev",
      "dynamodbTableName": "dev-modifierTable",
      "dynamodb": {
        "stages": [
          "dev"
        ],
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        }
      }
    },
    "pluginsData": {},
    "functions": {
      "add-modifier": {
        "handler": "me.molka.handler.ModifierHandler",
        "events": [
          {
            "http": {
              "path": "modifier/add",
              "method": "post",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"action\": \"CREATE_MODIFIER\",\n  \"name\": \"$inputRoot.name\",\n  \"cost\": \"$inputRoot.cost\",\n  \"atLeast\": \"$inputRoot.atLeast\",\n  \"atMost\": \"$inputRoot.atMost\",\n  \"isDefault\": \"$inputRoot.isDefault\",\n  \"isHidden\": \"$inputRoot.isHidden\"\n}\n"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "headers": {
                  "Access-Control-Allow-Origin": "'*'",
                  "Content-Type": "'application/json'"
                },
                "template": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n",
                "statusCodes": {
                  "200": {
                    "pattern": ""
                  },
                  "400": {
                    "pattern": "[\\s\\S]*\\[400\\][\\s\\S]*"
                  },
                  "401": {
                    "pattern": "[\\s\\S]*\\[401\\][\\s\\S]*"
                  },
                  "403": {
                    "pattern": "[\\s\\S]*\\[403\\][\\s\\S]*"
                  },
                  "404": {
                    "pattern": "[\\s\\S]*\\[404\\][\\s\\S]*"
                  },
                  "422": {
                    "pattern": "[\\s\\S]*\\[422\\][\\s\\S]*"
                  },
                  "500": {
                    "pattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*"
                  },
                  "502": {
                    "pattern": "[\\s\\S]*\\[502\\][\\s\\S]*"
                  },
                  "504": {
                    "pattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(.*Task timed out after \\d+\\.\\d+ seconds$)"
                  }
                }
              }
            }
          }
        ],
        "name": "modifier-service-dev-add-modifier",
        "package": {},
        "memory": 128,
        "timeout": 5,
        "runtime": "provided",
        "vpc": {},
        "versionLogicalId": "AddDashmodifierLambdaVersionPn3SiayYG5M8F729iXaKyVvW6SoWYvmtueJJHqXcuRI"
      },
      "get-modifier": {
        "handler": "me.molka.handler.ModifierHandler",
        "events": [
          {
            "http": {
              "path": "modifier/{modifierId}",
              "method": "get",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"id\": \"$input.params('id')\",\n  \"action\": \"GET_MODIFIER\"\n}\n"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "headers": {
                  "Access-Control-Allow-Origin": "'*'",
                  "Content-Type": "'application/json'"
                },
                "template": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n",
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"add-modifier\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "modifier-service-dev-get-modifier",
        "package": {},
        "memory": 128,
        "timeout": 5,
        "runtime": "provided",
        "vpc": {},
        "versionLogicalId": "GetDashmodifierLambdaVersion5G3OslINbJCY3SLKZZmWfGdZ47KrAOjMB2gwvutBioM"
      },
      "delete-modifier": {
        "handler": "me.molka.handler.ModifierHandler",
        "events": [
          {
            "http": {
              "path": "modifier/{modifierId}",
              "method": "delete",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"id\": \"$input.params('id')\",\n  \"action\": \"DELETE_MODIFIER\"\n}\n"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "headers": {
                  "Access-Control-Allow-Origin": "'*'",
                  "Content-Type": "'application/json'"
                },
                "template": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n",
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"add-modifier\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "modifier-service-dev-delete-modifier",
        "package": {},
        "memory": 128,
        "timeout": 5,
        "runtime": "provided",
        "vpc": {},
        "versionLogicalId": "DeleteDashmodifierLambdaVersionfLvpnDpaQOryCqkAOCTLYHz8SfTCVUYhcuXwLw5PD4"
      },
      "get-all-modifiers": {
        "handler": "me.molka.handler.ModifierHandler",
        "events": [
          {
            "http": {
              "path": "modifier",
              "method": "get",
              "integration": "AWS",
              "request": {
                "template": {
                  "application/json": "#set($inputRoot = $input.path('$')) {\n  \"action\": \"LIST\"\n}\n"
                },
                "passThrough": "NEVER"
              },
              "response": {
                "headers": {
                  "Access-Control-Allow-Origin": "'*'",
                  "Content-Type": "'application/json'"
                },
                "template": "#set($inputRoot = $input.path('$')) {\n  \"result\": $inputRoot\n}\n",
                "statusCodes": {
                  "$ref": "$[\"service\"][\"functions\"][\"add-modifier\"][\"events\"][0][\"http\"][\"response\"][\"statusCodes\"]"
                }
              }
            }
          }
        ],
        "name": "modifier-service-dev-get-all-modifiers",
        "package": {},
        "memory": 128,
        "timeout": 5,
        "runtime": "provided",
        "vpc": {},
        "versionLogicalId": "GetDashallDashmodifiersLambdaVersiondenVEdmM6UWbkj55DHUAJBAEC8G6EX27gfrfojaUs4"
      }
    },
    "resources": {
      "Resources": {
        "modifierTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "dev-modifierTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "artifact": "build/function.zip",
        "artifactDirectoryName": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/modifier-service/dev/1626088499897-2021-07-12T11:14:59.897Z",
    "artifact": "function.zip"
  }
}